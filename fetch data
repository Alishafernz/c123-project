#Fwtching the data

x = np.load('image.npz)['arr_0']

y = pd.read_csv("labels.csv")["labels]

print(pd.Series(y).value_counts())

classes = ['A','B','C','D','E','F','G','H','I','J',"X","L","M"
"N","O","F","Q","R","S","T","U","V","W","X","Y","Z"]

nclasses = len(classes)

#To only consider the area inside the box for detecting the digit

#roi = Region of Interest

roi = gray[upper_left[1]:bottom_right[1]
  upper_left[0]:bottom_right[0]]

  # convert to grayscale image - 'L' format means eachpixel is
  # represented by a single value from 0 to 255
  image_bw = im_pil.convert('L')
  image_bw_resized = image_bw.resize(( 28,28), Image.ANTIALIAS)
  #invert the image 
  image_bw_resized_inverted = PIL.ImageOps.invert(image_bw_resized)
  pixel_filter = 20
  #converting to scalar quantity 
  min_pixel = np.percentile(image_bw_resized_inverted, pixel_filter)
  #using clip to limit the values between 0,255
  image_bw_resized_inverted_scaled = np. asarray(image_bw_resized_inverted.min_pixel,0, 255)
  max_pixel = np.max(image_bw_resized_inverted)
  #converting into an aaray
  image_bw_resized_inverted_scaled = np.asarray(image_bw_resized_inverted_scaled)/max_pixel
  #creating a test sample and making a prediction 
  test_sample = np.aaray(image_bw_resized_inverted_scaled).reshape(1,784)
  test_pred = clf.predict(test_sample)
  print("Predicted class is: ",test_pred)
